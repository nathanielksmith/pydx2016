* Python Performance Primer

 ░░░░░░░░░▄▄▄▄▄
░░░░░░░░▀▀▀██████▄▄▄
░░░░░░▄▄▄▄▄░░█████████▄
░░░░░▀▀▀▀█████▌░▀▐▄░▀▐█
░░░▀▀█████▄▄░▀██████▄██
░░░▀▄▄▄▄▄░░▀▀█▄▀█════█▀
░░░░░░░░▀▀▀▄░░▀▀███░▀░░░░░░▄▄
░░░░░▄███▀▀██▄████████▄░▄▀▀▀██▌
░░░██▀▄▄▄██▀▄███▀░▀▀████░░░░░▀█▄
▄▀▀▀▄██▄▀▀▌████▒▒▒▒▒▒███░░░░▌▄▄▀
▌░░░░▐▀████▐███▒▒▒▒▒▐██▌
▀▄░░▄▀░░░▀▀████▒▒▒▒▄██▀
░░▀▀░░░░░░▀▀█████████▀
░░░░░░░░▄▄██▀██████▀█
░░░░░░▄██▀░░░░░▀▀▀░░█
░░░░░▄█░░░░░░░░░░░░░▐▌
░▄▄▄▄█▌░░░░░░░░░░░░░░▀█▄▄▄▄▀▀▄
▌░░░░░▐░░░░░░░░░░░░░░░░▀▀▄▄▄▀

Nate Smith | @nate_smith
Senior Engineer, Venmo | Co-Organizer, Django Girls PDX
PyDX 2016

* Disclaimer

- This talk is mostly for people who know the basics of Python, including its
  various data structures
- There are no sick hacks here, just practical tips
- Python will never be as fast as C, but a little bit of effort will get you major speed-ups

* Goals

- Respond with wit to language hipsters who want you to re-write in Go
- Answer the conversation-ending "What about the GIL??!?!!1!?" question
- Be able to diagnose your own performance bottlenecks

* Background

- Was once a performance engineer on a huge Python codebase
- Recently made some Python go 66% faster in the name of poetry


* What Does Performance Even Mean?

This car looks pretty fast. Is it performant, though?

                              _.-="_-         _
                         _.-="   _-          | ||"""""""---._______     __..
             ___.===""""-.______-,,,,,,,,,,,,`-''----" """""       """""  __'
      __.--""     __        ,'                   o \           __        [__|
 __-""=======.--""  ""--.=================================.--""  ""--.=======:
]       [w] : /        \ : |========================|    : /        \ :  [w] :
V___________:|          |: |========================|    :|          |:   _-"
 V__________: \        / :_|=======================/_____: \        / :__-"
 -----------'  "-____-"  `-------------------------------'  "-____-"

* What Does Performance Even Mean?

This car looks pretty slow. Is it performant, though?


                       ____________________
                     //|           |        \
                   //  |           |          \
      ___________//____|___________|__________()\__________________
    /__________________|_=_________|_=___________|_________________{}
    [           ______ |           | .           | ==  ______      { }
  __[__        /##  ##\|           |             |    /##  ##\    _{# }_
 {_____)______|##    ##|___________|_____________|___|##    ##|__(______}
                ##__##                                 ##__##        

* What Does Performance Even Mean?

Cars aren't just fast or slow, though.

- Top speed
- Acceleration
- Energy Efficiency
- Tire Redundancy

* What Does Performance Even Mean?

Code is the same!

- Time to complete a given task
- Number of steps taken to complete a given task
- Amount of storage space used when completing task
- Time spent going back and forth from storage

* The golden rule of performance

- Performance is about details.
 
- When your code is not performing as well as you'd like:
  - stop and take a deep breath
  - go outside for a walk
  - pet a quadruped of your choosing
  - when you're ready, come back and *look at the details*

- never, ever:
  - give into fancy/shiny new language hype
  - try to compile into some other language
  - go to hacker news
  - flee to buzzwords
   
* Ideal Computers
- Processing unit
  - Executes "steps"
  - Example: CPU, GPU. Might have more than one.
  
- Really Fast storage
  - Physically close to the Processing Unit
  - Like a closet in the basement of the PU's house
  - Example: L1/L2/L3 cache
   
- Fast storage
  - Still pretty close. Much bigger than lower tier.
  - Like a self-service storage unit a few blocks away
  - Example: RAM
   
- Slow storage
  - Far away, but massive.
  - Like a huge storage warehouse the next town over
  - Example: Hard drives, Network resources
   
* Ideal Computers 
- Today we'll be ignoring:
  - CPU/GPU architectures
  - OS differences
  - Network stuff

*but all of this might come up in your performance adventures*

* Slow Code Sample

#+BEGIN_SRC python
bad_characters = ['^', '#', '%', '@', '*']
phrase_endings = [':', '.', ',', ';', '?', '!']

book_text = open('/tmp/book.txt').read()

phrases = []
current_phrase = ''

for c in book_text:
  pass # TODO
#+END_SRC

* Profiling vs. Benchmarking
- Profiling is measuring the impact of each line of your code
  - on Storage (ie memory allocation)
  - on the Processing unit (ie number of steps per line)

- Benchmarking is measuring the amount of *time* taken by your code
  - Usually you benchmark whole programs or functions
  - Sometimes you benchmark a given line of code

* Know Your Data Structures

- Many performance issues can be alleviated fixed by using the right data structures
- This might look funny sometimes
* Know Your Data Structures - lists
* Know Your Data Structures - dictionaries
* Know Your Data Structures - sets
* Know Your Data Structures - generators
* Parallel Programming
* Parallel Programming - What's the GIL?
* Parallel Programming - Threads vs Processes
* Other Pythons
* Libraries of Note
* Protips
* Conclusion
* End

Ascii art from [[http://www.ascii-code.com/ascii-art/vehicles/cars.php][ascii-code]]


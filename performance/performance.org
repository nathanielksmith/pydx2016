* Python Performance Primer
Nate Smith | @nate_smith
Senior Engineer, Venmo | Co-Organizer, Django Girls PDX
PyDX 2016
#+BEGIN_EXAMPLE
 ░░░░░░░░░▄▄▄▄▄
░░░░░░░░▀▀▀██████▄▄▄
░░░░░░▄▄▄▄▄░░█████████▄
░░░░░▀▀▀▀█████▌░▀▐▄░▀▐█
░░░▀▀█████▄▄░▀██████▄██
░░░▀▄▄▄▄▄░░▀▀█▄▀█════█▀
░░░░░░░░▀▀▀▄░░▀▀███░▀░░░░░░▄▄
░░░░░▄███▀▀██▄████████▄░▄▀▀▀██▌
░░░██▀▄▄▄██▀▄███▀░▀▀████░░░░░▀█▄
▄▀▀▀▄██▄▀▀▌████▒▒▒▒▒▒███░░░░▌▄▄▀
▌░░░░▐▀████▐███▒▒▒▒▒▐██▌
▀▄░░▄▀░░░▀▀████▒▒▒▒▄██▀
░░▀▀░░░░░░▀▀█████████▀
░░░░░░░░▄▄██▀██████▀█
░░░░░░▄██▀░░░░░▀▀▀░░█
░░░░░▄█░░░░░░░░░░░░░▐▌
░▄▄▄▄█▌░░░░░░░░░░░░░░▀█▄▄▄▄▀▀▄
▌░░░░░▐░░░░░░░░░░░░░░░░▀▀▄▄▄▀
#+END_EXAMPLE

* Disclaimer
- This talk is for people who just know the basics of Python
- There are no sick hacks here, just practical tips and introductory info
- This talk is not exhaustive
- Python will never be as fast as C, but a little bit of effort will get you major speed-ups
- I've worked as a performance engineer but I don't know everything

* Goals
- Be able to diagnose your own performance bottlenecks
- Have some context as you learn more about performance
- Respond with wit to language hipsters who want you to re-write in something else

* Why I care about performance
- not for science
- not for work
- i care about efficient use of hardware
- making efficient use of hardware means:
  - your code will run on lower end hardware
  - your code will reach more people
- performance is a class issue

* What Does Performance Even Mean?

This car looks pretty fast. Is it performant, though?
#+BEGIN_EXAMPLE

                              _.-="_-         _
                         _.-="   _-          | ||"""""""---._______     __..
             ___.===""""-.______-,,,,,,,,,,,,`-''----" """""       """""  __'
      __.--""     __        ,'                   o \           __        [__|
 __-""=======.--""  ""--.=================================.--""  ""--.=======:
]       [w] : /        \ : |========================|    : /        \ :  [w] :
V___________:|          |: |========================|    :|          |:   _-"
 V__________: \        / :_|=======================/_____: \        / :__-"
 -----------'  "-____-"  `-------------------------------'  "-____-"
#+END_EXAMPLE

* What Does Performance Even Mean?

This car looks pretty slow. Is it performant, though?

#+BEGIN_EXAMPLE
                       ____________________
                     //|           |        \
                   //  |           |          \
      ___________//____|___________|__________()\__________________
    /__________________|_=_________|_=___________|_________________{}
    [           ______ |           | .           | ==  ______      { }
  __[__        /##  ##\|           |             |    /##  ##\    _{# }_
 {_____)______|##    ##|___________|_____________|___|##    ##|__(______}
                ##__##                                 ##__##        
#+END_EXAMPLE

* What Does Performance Even Mean?

Cars aren't just fast or slow, though.

- Top speed
- Acceleration
- Energy Efficiency
- Tire Redundancy

* What Does Performance Even Mean?

Code is the same!

- Time to complete a given task
- Number of steps taken to complete a given task
- Amount of storage space used when completing task
- Time spent going back and forth from storage

* The golden rule(s) of performance

- *Performance is about details.*
- *There are no silver bullets.*
 
- When your code is not performing as well as you'd like:
  - stop and take a deep breath
  - go outside for a walk
  - pet a quadruped of your choosing
  - when you're ready, come back and *look at the details*

- never:
  - give into fancy/shiny new language hype
  - try to compile into some other language
  - go to hacker news
  - flee to buzzwords
   
* Ideal Computers
- Processing unit
  - Executes "steps"
  - Example: CPU, GPU. Might have more than one.
  
- Really Fast storage
  - Physically close to the Processing Unit
  - Like a closet in the basement of the PU's house
  - Example: L1/L2/L3 cache
   
- Fast storage
  - Still pretty close. Much bigger than lower tier.
  - Like a self-service storage unit a few blocks away
  - Example: RAM
   
- Slow storage
  - Far away, but massive.
  - Like a huge storage warehouse the next town over
  - Example: Hard drives, Network resources
   
* Ideal Computers 
- Today we'll be ignoring:
  - CPU/GPU architectures
  - OS differences
  - Network stuff

*but all of this might come up in your performance adventures*

* Profiling vs. Benchmarking
- Profiling is measuring the impact of your code from a line or function perspective
  - on Storage (ie memory allocation)
  - on the Processing unit (ie number of steps per line or function)
  - Tools
    - ~cProfile~
    - ~line_profiler~
    - ~heapy~
    - ~dowser~
  - /looking from the inside/

* Profiling vs. Benchmarking
- Benchmarking is measuring the amount of *time* taken by your code
  - Usually you benchmark whole programs as a kind of black box
  - Tools
    - ~timeit~
    - bash's ~time~
  - /looking from the outside/
  - important to benchmark a lot under different scenarios
    - always average

* Unfortunate Code Sample
- heavy simplification of some code i recently wrote for [[https://github.com/nathanielksmith/prosaic][prosaic]]
- read a file, character by character
- collect a list of phrases

* Unfortunate Code Sample
#+BEGIN_SRC python
def process_book(filename):
  bad_characters = ['^', '#', '%', '@', '*', '\n']
  phrase_endings = [':', '.', ',', ';', '?', '!']
  phrases = []
  current_phrase = ''

  with open(filename) as book_file:
    c = book_file.read(1)
    while c != '':
      if c in bad_characters:
        pass
      elif c in phrase_endings:
        phrases.append(current_phrase)
        current_phrase = ''
      else:
        current_phrase += c
      c = book_file.read(1)

  return phrases
#+END_SRC

* Unfortunate Code Sample

#+BEGIN_EXAMPLE
In : timeit.timeit('process_book("/tmp/jane_eyre.txt")', setup='from __main__ import process_book', number=1)
Out: 1.5331217749990174
#+END_EXAMPLE

*BIG NOTE* always do multiple runs and average the results.

* Slow Storage
- Can we reduce disk reads?
- Can we move our stuff from slow storage to fast storage more efficiently?
 
* Slow Storage
#+BEGIN_SRC python
def process_book(filename):
  bad_characters = ['^', '#', '%', '@', '*']
  phrase_endings = [':', '.', ',', ';', '?', '!']
  phrases = []
  current_phrase = ''
  book_text = open(filename).read()

  for c in book_text:
    if c in bad_characters:
      pass
    elif c in phrase_endings:
      phrases.append(current_phrase)
      current_phrase = ''
    else:
      current_phrase += c

  return phrases
#+END_SRC

* Slow Storage
#+BEGIN_EXAMPLE
In : timeit.timeit('process_book("/tmp/jane_eyre.txt")', setup='from __main__ import process_book', number=1)
Out: 0.9338085659983335
#+END_EXAMPLE

*always average*

* Lists: The Hidden Enemy
#+BEGIN_SRC python
bad_characters = ['^', '#', '%', '@', '*']

# ...
for c in book_text:
  if c in bad_characters:
    pass
# ...
#+END_SRC
- ~in~ can take a long time -- up to the length of a list
- that's a lot of steps, especially since we're using ~in~ twice in our loop
- ~sets~ to the rescue!

* Lists: The Hidden Enemy
#+BEGIN_SRC python
def process_book(filename):
  bad_characters = set(['^', '#', '%', '@', '*'])
  phrase_endings = set([':', '.', ',', ';', '?', '!'])
  book_text = open(filename).read()
  phrases = []
  current_phrase = ''

  for c in book_text:
    if c in bad_characters:
      pass
    elif c in phrase_endings:
      phrases.append(current_phrase)
      current_phrase = ''
    else:
      current_phrase += c

  return phrases
#+END_SRC

* Lists: The Hidden Enemy
#+BEGIN_EXAMPLE
In : timeit.timeit('process_book("/tmp/jane_eyre.txt")', setup='from __main__ import process_book', number=1)
Out: 0.3641004840028472
#+END_EXAMPLE

*always average*

* Over-allocation
- Lists often over-allocate to make room for growth
- Not always possible to avoid, but ~generators~ can help
- use the ~yield~ keyword in a function that would otherwise return a list

* Over-allocation
#+BEGIN_SRC python
def book_phrases(filename):
  bad_characters = set(['^', '#', '%', '@', '*'])
  phrase_endings = set([':', '.', ',', ';', '?', '!'])

  book_text = open(filename).read()

  current_phrase = ''

  for c in book_text:
    if c in bad_characters:
      pass
    elif c in phrase_endings:
      yield current_phrase
      current_phrase = ''
    else:
      current_phrase += c
#+END_SRC

* Over-allocation
- Now other functions can consume phrases one at a time without ever building that giant list

#+BEGIN_SRC python
for phrase in book_phrases('/tmp/jane_eyre.txt'):
  do_a_rad_thing(phrase)
#+END_SRC

- generators are seriously so cool!

* Over-allocation
#+BEGIN_EXAMPLE
In : timeit.timeit('list(book_phrases("/tmp/jane_eyre.txt"))', setup='from __main__ import book_phrases', number=1)
Out: 0.3666126840034849
#+END_EXAMPLE

*always average*

* Honorable Mention - tuples
#+BEGIN_SRC python
sonic = ('sonic', 'blue', 'fast') 
#+END_SRC

- Faster than lists to create (if they're small enough)
- Only useful if you know exactly how many elements they'll have
- 'Grow' by creating a new tuple out of two others
  - ~(0,1,2) + (3,4,5)~ 
  - takes more steps but less RAM than growing lists
   
* Honorable Mention - dictionaries
#+BEGIN_SRC python
sonic = {'name': 'sonic', 'color':'blue', 'skill':'fast'}
#+END_SRC

- basically one step to look up information
  - way faster than searching a list, but...
  - not generally faster than sets
- not always a great fit for your data
- only as performant as its keys' hashing functions
  - can expect could performance with built-in types (~str~, ~int~, ...)
  - be really careful if making your own hashable object

* Conclusion
- Things fast with small inputs can get very slow with large inputs
  - Don't sweat the small stuff
  - Don't prematurely optimize
    
- A little goes a long way
   
- You can do it!

* Thanks!

- [[https://twitter.com/nate_smith][@nate_smith]]
- [[http://tilde.town/~vilmibm]]

*Gratitude*

- Ascii art from [[http://www.ascii-code.com/ascii-art/vehicles/cars.php][ascii-code]]
- This book rules!
[[./hpp.jpg]]

